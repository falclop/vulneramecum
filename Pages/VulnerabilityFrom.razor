@page "/vulnform"
@using vulneramecum.Data
@using vulneramecum.Service
@using Penman.Blazor.Quill
@inject VulnerabilityService VulnService
@inject NavigationManager Navigation

<h3 class="mb-4">Nueva Vulnerabilidad</h3>

<EditForm Model="vulnerability" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Título -->
    <div class="mb-3">
        <label class="form-label">Título</label>
        <InputText class="form-control" @bind-Value="vulnerability.Title" />
    </div>

    <!-- Editor enriquecido para la descripción -->
    <div class="mb-3">
        <label class="form-label">Descripción (formato enriquecido)</label>
        <TextEditor @ref="descEditor"
                    Toolbar="new Toolbar { ShowFullToolbar = true }"
                    Theme="EditorTheme.Snow"
                    Placeholder="Describe la vulnerabilidad aquí..." />
    </div>

    <!-- Editor enriquecido para la solución -->
    <div class="mb-3">
        <label class="form-label">Solución</label>
        <TextEditor @ref="solEditor"
                    Toolbar="new Toolbar { ShowFullToolbar = true }"
                    Theme="EditorTheme.Snow"
                    Placeholder="Describe la solución aquí..." />
    </div>

    <!-- Lenguaje y severidad -->
    <div class="row mb-3">
        <div class="col-md-6">
            <label class="form-label">Lenguaje</label>
            <InputSelect class="form-select" @bind-Value="vulnerability.Language">
                <option value="">-- Seleccionar --</option>
                <option value="C#">C#</option>
                <option value="JavaScript">JavaScript</option>
            </InputSelect>
        </div>
        <div class="col-md-6">
            <label class="form-label">Severidad</label>
            <InputSelect class="form-select" @bind-Value="vulnerability.Severity">
                <option value="">-- Seleccionar --</option>
                <option value="Alta">Alta</option>
                <option value="Media">Media</option>
                <option value="Baja">Baja</option>
            </InputSelect>
        </div>
    </div>

    <!-- Subida de imágenes -->
    <div class="mb-3">
        <label class="form-label">Imágenes (puedes subir varias)</label>
        <InputFile OnChange="HandleImageUpload" multiple />
    </div>

    @if (uploadedImages.Any())
    {
        <div class="row">
            @foreach (var img in uploadedImages)
            {
                <div class="col-md-3 mb-2">
                    <img src="@img.PreviewUrl" class="img-thumbnail" style="object-fit: contain; max-height: 200px;" />
                </div>
            }
        </div>
    }

    <!-- Ejemplos -->
    <h5 class="mt-4">Ejemplos prácticos</h5>
    @foreach (var example in examples)
    {
        <div class="row mb-2">
            <div class="col-md-3"><InputText class="form-control" @bind-Value="example.PropertyName" placeholder="Proyecto" /></div>
            <div class="col-md-3"><InputText class="form-control" @bind-Value="example.ClassName" placeholder="Clase" /></div>
            <div class="col-md-3"><InputText class="form-control" @bind-Value="example.CommitHash" placeholder="Commit" /></div>
            <div class="col-md-3"><InputDate class="form-control" @bind-Value="example.CommitDate" /></div>
        </div>
    }
    <button type="button" class="btn btn-outline-secondary btn-sm mb-3" @onclick="AddExample">+ Añadir ejemplo</button>

    <!-- Botón de guardar -->
    <div>
        <button type="submit" class="btn btn-success">Guardar</button>
    </div>
</EditForm>

@code {
    private Vulnerability vulnerability = new();
    private List<Example> examples = new();
    private List<TempImage> uploadedImages = new();

    private TextEditor? descEditor;
    private TextEditor? solEditor;

    private async Task HandleValidSubmit()
    {
        vulnerability.Solution = await solEditor!.GetHtml();
        vulnerability.Examples = examples;

        var id = await VulnService.CreateAsync(vulnerability);
        await VulnService.SaveImagesAsync(id, uploadedImages);

        Navigation.NavigateTo("/vulnerabilities");
    }

    private void AddExample()
    {
        examples.Add(new Example { CommitDate = DateTime.Today });
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            using var stream = file.OpenReadStream();
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var base64 = Convert.ToBase64String(ms.ToArray());

            uploadedImages.Add(new TempImage
            {
                FileName = file.Name,
                Content = ms.ToArray(),
                PreviewUrl = $"data:{file.ContentType};base64,{base64}"
            });
        }
    }

    public class TempImage
    {
        public string FileName { get; set; } = string.Empty;
        public byte[] Content { get; set; } = Array.Empty<byte>();
        public string PreviewUrl { get; set; } = string.Empty;
    }
}
