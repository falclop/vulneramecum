using Microsoft.EntityFrameworkCore;
using vulneramecum.Data;
using static vulneramecum.Pages.VulnerabilityFrom;

namespace vulneramecum.Service
{
    public class VulnerabilityService
    {
        private readonly AppDbContext _context;
        public VulnerabilityService(AppDbContext context)
        {
            _context = context;
        }
        // Método para obtener todas las vulnerabilidades
        public async Task<List<Vulnerability>> GetAllVulnerabilitiesAsync()
        {
            return await _context.Vulnerabilities
                .Include(v => v.Images.OrderBy(i => i.OrderIndex))
                .Include(v => v.Examples.OrderBy(i => i.CommitDate))
                .ToListAsync();
        }
        // Método para obtener una vulnerabilidad por su ID
        public async Task<Vulnerability?> GetVulnerabilityByIdAsync(int id)
        {
            return await _context.Vulnerabilities
                .Include(v => v.Images.OrderBy(i => i.OrderIndex))
                .Include(v => v.Examples.OrderBy(i => i.CommitDate))
                .FirstOrDefaultAsync(v => v.Id == id);
        }
        // Método para agregar una nueva vulnerabilidad
        public async Task<int> CreateAsync(Vulnerability vulnerability)
        {
            _context.Vulnerabilities.Add(vulnerability);
            await _context.SaveChangesAsync();
            return vulnerability.Id;
        }
        // Método para actualizar una vulnerabilidad existente
        public async Task UpdateVulnerabilityAsync(Vulnerability vulnerability)
        {
            _context.Vulnerabilities.Update(vulnerability);
            await _context.SaveChangesAsync();
        }
        // Método para eliminar una vulnerabilidad por su ID
        public async Task DeleteVulnerabilityAsync(int id)
        {
            var vuln = await _context.Vulnerabilities
                .Include(v => v.Images)
                .Include(v => v.Examples)
                .FirstOrDefaultAsync(v => v.Id == id);

            if (vuln != null)
            {
                _context.Vulnerabilities.Remove(vuln);
                await _context.SaveChangesAsync();
            }
        }

        public async Task SaveImagesAsync(int vulnerabilityId, List<TempImage> images)
        {
            var uploadPath = Path.Combine("wwwroot", "uploads");

            // Asegurarse de que el directorio de carga exista
            if (!Directory.Exists(uploadPath))
            {
                Directory.CreateDirectory(uploadPath);
            }

            int index = 0;
            foreach (var img in images)
            {
                var fileName = $"{Guid.NewGuid()}_{img.FileName}";
                var filePath = Path.Combine("wwwroot/uploads", fileName);

                await File.WriteAllBytesAsync(filePath, img.Content);

                _context.VulnerabilityImages.Add(new VulnerabilityImage
                {
                    VulnerabilityId = vulnerabilityId,
                    ImagePath = $"/uploads/{fileName}",
                    OrderIndex = index++,
                });
            }

            await _context.SaveChangesAsync();
        }
    }
}
