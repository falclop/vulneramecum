using Microsoft.EntityFrameworkCore;
using vulneramecum.Data;
using static vulneramecum.Pages.VulnerabilityFrom;

namespace vulneramecum.Service
{
    public class VulnerabilityService
    {
        private readonly IDbContextFactory<AppDbContext> _contextFactory;

        public VulnerabilityService(IDbContextFactory<AppDbContext> contextFactory)
        {
            _contextFactory = contextFactory;
        }

        // Obtener todas las vulnerabilidades
        public async Task<List<Vulnerability>> GetAllVulnerabilitiesAsync()
        {
            await using var context = _contextFactory.CreateDbContext();

            return await context.Vulnerabilities
                .Include(v => v.Images.OrderBy(i => i.OrderIndex))
                .Include(v => v.Examples.OrderBy(e => e.CommitDate))
                .ToListAsync();
        }

        // Obtener una vulnerabilidad por ID
        public async Task<Vulnerability?> GetVulnerabilityByIdAsync(int id)
        {
            await using var context = _contextFactory.CreateDbContext();

            return await context.Vulnerabilities
                .Include(v => v.Images.OrderBy(i => i.OrderIndex))
                .Include(v => v.Examples.OrderBy(e => e.CommitDate))
                .FirstOrDefaultAsync(v => v.Id == id);
        }

        // Crear una nueva vulnerabilidad
        public async Task<int> CreateAsync(Vulnerability vulnerability)
        {
            await using var context = _contextFactory.CreateDbContext();

            context.Vulnerabilities.Add(vulnerability);
            await context.SaveChangesAsync();
            return vulnerability.Id;
        }

        // Actualizar una vulnerabilidad existente
        public async Task UpdateVulnerabilityAsync(Vulnerability vulnerability)
        {
            await using var context = _contextFactory.CreateDbContext();

            var existing = await context.Vulnerabilities
                .Include(v => v.Examples)
                .FirstOrDefaultAsync(v => v.Id == vulnerability.Id);

            if (existing is null)
                throw new ArgumentException("Vulnerability not found", nameof(vulnerability.Id));

            existing.Title = vulnerability.Title;
            existing.Description = vulnerability.Description;
            existing.Solution = vulnerability.Solution;
            existing.Language = vulnerability.Language;
            existing.Severity = vulnerability.Severity;

            // Actualizar ejemplos
            existing.Examples.Clear();
            foreach (var example in vulnerability.Examples)
            {
                existing.Examples.Add(new Example
                {
                    PropertyName = example.PropertyName,
                    ClassName = example.ClassName,
                    CommitHash = example.CommitHash,
                    CommitDate = example.CommitDate
                });
            }

            await context.SaveChangesAsync();
        }

        // Eliminar una vulnerabilidad por ID
        public async Task DeleteVulnerabilityAsync(int id)
        {
            await using var context = _contextFactory.CreateDbContext();

            var vuln = await context.Vulnerabilities
                .Include(v => v.Images)
                .Include(v => v.Examples)
                .FirstOrDefaultAsync(v => v.Id == id);

            if (vuln != null)
            {
                context.Vulnerabilities.Remove(vuln);
                await context.SaveChangesAsync();
            }
        }

        // Guardar imágenes asociadas a una vulnerabilidad
        public async Task SaveImagesAsync(int vulnerabilityId, List<TempImage> images)
        {
            await using var context = _contextFactory.CreateDbContext();

            var uploadPath = Path.Combine("wwwroot", "uploads");

            if (!Directory.Exists(uploadPath))
                Directory.CreateDirectory(uploadPath);

            int index = 0;
            foreach (var img in images)
            {
                var fileName = $"{Guid.NewGuid()}_{img.FileName}";
                var filePath = Path.Combine(uploadPath, fileName);

                await File.WriteAllBytesAsync(filePath, img.Content);

                context.VulnerabilityImages.Add(new VulnerabilityImage
                {
                    VulnerabilityId = vulnerabilityId,
                    ImagePath = $"/uploads/{fileName}",
                    OrderIndex = index++,
                });
            }

            await context.SaveChangesAsync();
        }
    }
}
